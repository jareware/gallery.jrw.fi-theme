<!DOCTYPE html>
<html>

  <head>
      <meta charset="utf-8" />
      <meta name="viewport" content="width=device-width, user-scalable=no" />
      <title>{{gallery.title}} - {{album.title}}</title>
      <link rel="stylesheet" href="{{relative 'public/lightgallery/css/lightgallery.css'}}" />
      <link rel="stylesheet" href="{{relative 'public/videojs/video-js.min.css'}}" />
      <link rel="stylesheet" href="{{relative 'public/lightgallery/css/lg-exif.min.css'}}" />
      <link rel="stylesheet" href="{{relative 'public/core.css'}}" />
      <link rel="stylesheet" href="{{relative 'public/theme.css'}}" />
      <link rel="stylesheet" href="{{relative 'public/justifiedgallery/justifiedGallery.min.css'}}" />

      <!-- Hack the video player to use same sizing as the images, but with a max width/height -->
      <style>
        .lg-outer .lg-video-cont {
          max-width: 960px; /* that is, 1920/2 */
          height: 100vh !important;
          max-height: 960px;
        }
        .lg-outer .lg-video {
          height: 100%;
          padding-bottom: initial !important;
        }
      </style>

      <!-- Other small tweaks -->
      <style>
        /* Align the contents of the header & navigation with the justified-gallery default gutters of 10px */
        #container > header,
        #container > nav {
          padding: 0 10px;
        }
        /* Let's have the sub-title bar stick to the very bottom, instead of floating on top of the image */
        .lg-sub-html {
          bottom: 0;
        }
        /* Make the sub-titles more prominent */
        .lg-sub-html {
          font-size: 20px;
          background-color: rgba(0, 0, 0, 0.65);
          padding: 20px 40px;
        }
      </style>

  </head>

  <body>

    {{> content}}
    {{> video-loader}}

    <!-- jQuery -->
    <script src="{{relative 'public/jquery.min.js'}}"></script>
    <!-- VideoJS -->
    <script src="{{relative 'public/videojs/video.min.js'}}"></script>
    <!-- LightGallery -->
    <script src="{{relative 'public/lightgallery/js/lightgallery.js'}}"></script>
    <script src="{{relative 'public/lightgallery/js/lg-autoplay.js'}}"></script>
    <script src="{{relative 'public/lightgallery/js/lg-pager.js'}}"></script>
    <script src="{{relative 'public/lightgallery/js/lg-thumbnail.js'}}"></script>
    <script src="{{relative 'public/lightgallery/js/lg-video.js'}}"></script>
    <script src="{{relative 'public/lightgallery/js/lg-exif.min.js'}}"></script>
    <script src="{{relative 'public/justifiedgallery/jquery.justifiedGallery.min.js'}}"></script>

    <script>
      $(document).ready(function() {
        // https://sachinchoolur.github.io/lightGallery/docs/api.html
        $("#media").lightGallery({
          speed: 0, // disable cross-slide animations
          thumbWidth: 80,
          controls: true,
          loop : false,
          download: true,
          counter: true,
          videojs: true,
          showThumbByDefault: false,
          exThumbImage: 'data-exthumbimage',
          videojsOptions: {}, // https://docs.videojs.com/tutorial-options.html#autoplay
        });

        // At the time of writing, I haven't found a way to get autoplay to work:
        // https://github.com/thumbsup/thumbsup/issues/186
        // ...and hooking it up to slide change with something like:
        // $("#media").on('onAfterSlide.lg', function...)
        // ...seems to cause issues sometimes with videos playing in the background.
        // Thus, we just add a bit of convenience:
        $(document).on('keypress', function(event) {
          if (event.keyCode !== 32) return; // not the space bar -> ignore
          if ($(event.target).closest('.vjs-control-bar').length) return; // keypress from within the video player controls themselves -> ignore
          $('.lg-current .vjs-big-play-button').click(); // simulate click on the play button of the current video
        })

        // After navigating away from a video, it will continue to exist off-screen, and may be still focused,
        // if the navigation took place with the arrow keys, for example. Thus, we blur whatever's currently
        // focused, so we don't accidentally let keypresses etc go into an off-screen video.
        $("#media").on('onBeforeSlide.lg', function() {
          $(document.activeElement).blur();
        })

        // Generate an exiftool command for setting the description when "D" is pressed
        // https://www.iptc.org/std/photometadata/specification/IPTC-PhotoMetadata#description
        $(document).on('keypress', function(event) {
          if (event.keyCode !== 100) return; // not the "D" key -> ignore
          const currentSrc = $('.lg-current').find('img.lg-image, .lg-video video').attr('src');
          if (!currentSrc) return alert('Error: Unable to determine source file');
          const $media = $('#media > *[data-download-url="' + currentSrc + '"]');
          const currentDesc = $media.attr('data-sub-html') || '';
          const newDesc = prompt('New description for this file:', currentDesc);
          if (newDesc === null) return; // prompt cancelled by user -> abort
          if (newDesc === currentDesc) return; // no change -> abort
          const cmdDesc = newDesc.replace(/"/g, '\\"');
          const cmdFile = $media.data('filename');
          const cmd = `exiftool -overwrite_original -Description="${cmdDesc}" "${cmdFile}"`;
          $media.attr('data-sub-html', newDesc); // update the description in the DOM, so it shows correctly when re-navigating to this file
          $('.lg-sub-html').text(newDesc).removeClass('lg-empty-html'); // update the description in the title bar, so we can see the latest one right away
          localStorage.commands = (localStorage.commands || '') + cmd + '\n';
        })

        // Copy the currently pending commands when "C" is pressed
        $(document).on('keypress', function(event) {
          if (event.keyCode !== 99) return; // not the "C" key -> ignore
          const cmds = localStorage.commands || '';
          console.log(`Currently pending commands are:\n${cmds || 'n/a'}`);
          if (!cmds) return alert('No commands waiting to be copied to clipboard');
          Promise.resolve()
            .then(() => navigator.clipboard.writeText(cmds))
            .then(() => {
              if (!confirm(`${cmds.split('\n').length - 1} commands copied to clipboard!\n\nErase command storage?`)) return;
              localStorage.commands = '';
            })
            .catch(err => alert(`Error: Copying commands to clipboard failed: ${err}`))
        })

        // Init justified gallery for albums
        $("#albums").justifiedGallery({
          {{!-- selector: '.albumList', --}}
          margins: 10,
          rowHeight: 300,
          maxRowHeight: 325,
        });

        // Init justified gallery for photos
        $("#media").justifiedGallery({
          selector: '.albumList',
          margins: 10,
          rowHeight: 250,
          maxRowHeight: 275,
        });
      });
    </script>

    {{> analytics}}

  </body>

</html>
